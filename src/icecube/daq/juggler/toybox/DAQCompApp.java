package icecube.daq.juggler.toybox;

import icecube.daq.juggler.component.DAQCompException;
import icecube.daq.juggler.component.DAQCompServer;
import icecube.daq.juggler.component.DAQComponent;
import icecube.daq.juggler.component.DAQConnector;

import icecube.daq.juggler.mock.MockAppender;

import java.net.MalformedURLException;
import java.net.URL;

import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Level;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import icecube.daq.log.DAQLogAppender;

/**
 * DAQ component server application.
 */
public final class DAQCompApp
{
    /** unknown component */
    private static final int COMP_UNKNOWN = 0;
    /** data sink component */
    private static final int COMP_DATASINK = 1;
    /** hit source component */
    private static final int COMP_HITSRC = 2;
    /** passthrough source component */
    private static final int COMP_PASSTHRU = 3;
    /** standalone component */
    private static final int COMP_ZERO = 4;
    /** event builder harness component */
    private static final int COMP_EBHARNESS = 5;

    /** config server URL */
    private URL configURL;
    /** Number of payloads generated by HitSource */
    private int numGenerated = 100;
    /** Number of hits per trigger */
    private int hitsPerTrigger = 5;
    /** Data type used to label input engine */
    private String inputType;
    /** Data type used to label output engine */
    private String outputType;


    /** Port and address to log to */
    private String logAddress = null;
    private int    logPort    = 9001;

    /** Logger for most output */
    private static final Log log = LogFactory.getLog(DAQCompServer.class);

    /**
     * Create a DAQ component and start a server for it.
     *
     * @param args command-line arguments
     *
     * @throws DAQCompException if there is a problem
     */
    private DAQCompApp(String[] args)
        throws DAQCompException
    {
        DAQComponent comp = processArgs(args);
        new DAQCompServer(comp, configURL);
    }

    /**
     * Create the specified component.
     *
     * @param compType component to create
     *
     * @return component
     */
    private DAQComponent createComponent(int compType)
    {
        ToyConfig toyCfg = new ToyConfig(128, 2000000L, 5000000L);

        DAQComponent comp;
        switch (compType) {
        case COMP_DATASINK:
            if (inputType == null) {
                inputType = DAQConnector.TYPE_TEST_HIT;
            }

            comp = new DataSink(toyCfg, inputType);
            break;
        case COMP_HITSRC:
            if (outputType == null) {
                outputType = DAQConnector.TYPE_TEST_HIT;
            }

            comp = new HitSource(toyCfg, numGenerated, outputType);
            break;
        case COMP_PASSTHRU:
            if (inputType == null) {
                inputType = DAQConnector.TYPE_TEST_HIT;
            }
            if (outputType == null) {
                outputType = DAQConnector.TYPE_TEST_DATA;
            }

            comp = new PassThrough(toyCfg, inputType, outputType);
            break;
        case COMP_ZERO:
            if (inputType != null || outputType != null) {
                log.warn("Input/output type ignored");
            }

            comp = new Zero(toyCfg);
            break;
        case COMP_EBHARNESS:
            if (inputType != null || outputType != null) {
                log.warn("Input/output type ignored");
            }

            comp = new EBHarness(numGenerated, hitsPerTrigger);
            break;
        default:
            comp = null;
            break;
        }

        return comp;
    }

    /**
     * Extract a component type from the specified string.
     *
     * @param typeStr type string
     *
     * @return <tt>COMP_UNKNOWN</tt> if no component type was found
     */
    private int parseComponentType(String typeStr)
    {
        int compType;
        switch (typeStr.charAt(0)) {
        case'd':
        case 'D':
            compType = COMP_DATASINK;
            break;
        case'e':
        case 'E':
            compType = COMP_EBHARNESS;
            break;
        case'h':
        case 'H':
            compType = COMP_HITSRC;
            break;
        case'p':
        case 'P':
            compType = COMP_PASSTHRU;
            break;
        case'z':
        case 'Z':
            compType = COMP_ZERO;
            break;
        default:
            compType = COMP_UNKNOWN;
            break;
        }

        return compType;
    }

    /**
     * Process command-line arguments.
     *
     * @return requested DAQ component
     */
    private DAQComponent processArgs(String[] args)
    {
        int compType = COMP_UNKNOWN;

        boolean usage = false;
        for (int i = 0; i < args.length; i++) {
            if (args[i].length() > 1 && args[i].charAt(0) == '-') {
                if (args[i].charAt(1) == 'c') {
                    i++;

                    String urlStr = args[i];
                    if (!urlStr.startsWith("http://")) {
                        urlStr = "http://" + urlStr;
                    }

                    try {
                        configURL = new URL(urlStr);
                    } catch (MalformedURLException mue) {
                        System.err.println("Bad configuration URL \"" +
                                           urlStr + "\"");
                        usage = true;
                    }
                } else if (args[i].charAt(1) == 'd') {
                    inputType = DAQConnector.TYPE_TEST_DATA;
                } else if (args[i].charAt(1) == 'g') {
                    i++;

                    try {
                        numGenerated = Integer.parseInt(args[i]);
                    } catch (NumberFormatException nfe) {
                        System.err.println("Bad number \"" + args[i] + "\"");
                        usage = true;
                    }
                } else if (args[i].charAt(1) == 'i') {
                    i++;

                    inputType = args[i];
                } else if (args[i].charAt(1) == 'o') {
                    i++;

                    outputType = args[i];
		} else if (args[i].charAt(1) == 'l') {
		    i++;
                    String addrStr = args[i];
                    int ic = addrStr.indexOf(':');
                    logAddress = addrStr.substring(0, ic);
                    try {
                        logPort = Integer.parseInt(addrStr.substring(ic+1));
                    } catch (NumberFormatException e) {
                        System.err.println("Bad port argument in: \"" + addrStr + "\"");
                        usage = true;
                    }
                } else {
                    System.err.println("Unknown option '" + args[i] + "'");
                    usage = true;
                }
            } else if (args[i].length() == 0) {
                // ignore empty arguments
            } else if (compType != COMP_UNKNOWN) {
                System.err.println("Multiple components specified!");
                usage = true;
            } else {
                compType = parseComponentType(args[i]);
                if (compType == COMP_UNKNOWN) {
                    System.err.println("Unrecognized component \"" + args[i] +
                                       "\"");
                    usage = true;
                }
            }
        }

        if (compType == COMP_UNKNOWN) {
            System.err.println("Please specify a component");
            usage = true;
        }

        if (configURL == null) {
            final String urlStr = "http://localhost:8080";
            try {
                configURL = new URL(urlStr);
            } catch (MalformedURLException mue) {
                System.err.println("Bad configuration URL \"" + urlStr + "\"");
                usage = true;
            }
        }

        if (usage) {
            System.err.println("java DAQCompApp" +
                               " [-c configServerURL]" +
                               " [-d(ataSink)]" +
                               " [-g numGenerated]" +
                               " [-i inputType]" +
                               " [-o outputType]" +
			       " [-l logAddress:logPort]" +
                               " (dataSink|ebHarness|hitSrc|passThru|zero)" +
                               "");
            System.exit(1);
        }

        BasicConfigurator.resetConfiguration();
	if(logAddress != null) {
	    //System.out.println("Will log to port " + logPort + " on " + logAddress);
	    try {
		BasicConfigurator.configure(new DAQLogAppender(Level.INFO,
							       logAddress, 
							       logPort));
	    } catch(Exception e) {
		System.err.println(e);
		System.exit(-1);
	    }
	    log.info("Started catch-all logging at "+logAddress+":"+logPort);
	} else {
	    BasicConfigurator.configure(new MockAppender(Level.INFO));
	}

        return createComponent(compType);
    }

    /**
     * Run a DAQ component server.
     *
     * @param args command-line arguments
     *
     * @throws DAQCompException if there is a problem
     */
    public static void main(String[] args)
        throws DAQCompException
    {
        new DAQCompApp(args);
    }
}
